持久化机制：RDB,AOF，（4.0之后增加，所以AOF重写方式也不一样需要配置aof-use-rdb-preamble开启）混合持久化


【重点：aof-use-rdb-preamble 需要开启 appendonly和auto-aof-rewrite-percentage】


AOF持久化介绍：

其实Redis oaf机制包括了两件事，rewrite和AOF（主线程命令写入aof缓冲区）。rewrite类似于普通数据库管理系统日志恢复点,
当AOF文件随着写命令的运行膨胀时，当文件大小触碰到临界时，rewrite会被运行。
BGREWRITEAOF会像replication一样，【fork出一个子进程】，创建一个临时文件，遍历数据库，
将每个key、value对输出到临时文件。输出格式就是Redis的命令，但是为了减小文件大小，会将多个key、value对集合起来用一条命令表达。
在rewrite期间的写操作会保存在内存的rewrite buffer中，rewrite成功后这些操作也会复制到临时文件中，在最后临时文件会代替AOF文件。
以上在AOF打开的情况下，如果AOF是关闭的，那么rewrite操作可以通过bgrewriteaof命令来进行。



appendonly no # 是否开启aof
appendfilename "appendonly.aof" # 文件名

#磁盘同步策略 默认每秒一次
# appendfsync always  # 每次


auto-aof-rewrite-percentage 100 配置自动触发重写（auto-aof-rewrite-percentage 0 (关闭rewrite模式)）

appendfsync everysec # 每秒一次,always、everysec和no。

设置为always时，会极大消弱Redis的性能，因为这种模式下每次write后都会调用fsync（Linux为调用fdatasync）。

如果设置为no，则write后不会有fsync调用，由操作系统自动调度刷磁盘，性能是最好的。

everysec为最多每秒调用一次fsync，这种模式性能并不是很糟糕，一般也不会产生毛刺，这归功于Redis引入了BIO线程，所有fsync操作都异步交给了BIO线程。

