1. 内存使用

memcache把所有的数据存储在物理内存里。

redis有自己的VM机制，理论上能够存储比物理内存更多的数据，当数据超量时，会引发swap，把冷数据刷到磁盘上


2:集群问题
Memcached 扩容复杂
redis cluster 自动扩容


3: MySql+Memcached架构的问题
　　实际MySQL是适合进行海量数据存储的，通过Memcached将热点数据加载到cache，加速访问，
很多公司都曾经使用过这样的架构，但随着业务数据量的不断增加，和访问量的持续增长，我们遇到了很多问题：
　　1.  MySQL需要不断进行拆库拆表，Memcached也需不断跟着扩容，扩容和维护工作占据大量开发时间。
   2.  Memcached数据命中率低或down机，大量访问直接穿透到DB，MySQL无法支撑
   3.  在Memcached中，我们经常将一些结构化的信息打包成HashMap，在客户端序列化后存储为一个字符串的值，
   比如用户的昵称、年龄、性别、积分等，这时候在需要修改其中某一项时，通常需要将所有值取出反序列化后，
   修改某一项的值，再序列化存储回去。这样不仅增大了开销，也不适用于一些可能并发操作的场合（比如两个并发的操作都需要修改积分）。
   而Redis的Hash结构可以使你像在数据库中Update一个属性一样只修改某一项属性值
   4. 并发修改同一数据，会出现问题

   memcahed 缓存场景[不需要持久化的业务可以适用]
   1：token  2：session  3静态资源缓存  4：memcached 支持incr

4：memcahed的核心数据结构是hashmap





