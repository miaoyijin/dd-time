    int * p_int;
    p_int = (int *)&5;//错误整数不能这么使用, 因为这个5本身就没有存在地址里
    //说明编译时字符串和整数处理方式不同
    printf("%p pint", p_int);
	
	
	是因为编译是字符串属于产量已经保存到数据段了，有虚拟地址了，整数5还是属于代码段无地址
	
	

	
数据段：由三部分组成：

<1>只读数据段：
只读数据段是程序使用的一些不会被更改的数据，使用这些数据的方式类似查表式的操作，由于这些变量不需要更改，因此只需要放置在只读存储器中即可。一般是const修饰的变量以及程序中使用的文字常量一般会存放在只读数据段中。
<2>已初始化的读写数据段：
已初始化数据是在程序中声明，并且具有初值的变量，这些变量需要占用存储器的空间，在程序执行时它们需要位于可读写的内存区域内，并且有初值，以供程序运行时读写。
在程序中一般为已经初始化的全局变量，已经初始化的静态局部变量(static修饰的已经初始化的变量)
<3>未初始化段（BSS）：
[
BSS段通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。
特点是可读写的，在程序执行之前BSS段会自动清0。
]
未初始化数据是在程序中声明，但是没有初始化的变量，这些变量在程序运行之前不需要占用存储器的空间。与读写数据段类似，它也属于静态数据区。但是该段中数据没有经过初始化。
未初始化数据段只有在运行的初始化阶段才会产生，因此它的大小不会影响目标文件的大小。在程序中一般是没有初始化的全局变量和没有初始化的静态局部变量。




全局变量，静态局部变量，静态全局变量都在静态存储区分配空间，而局部变量在栈里分配空间